
import turtle
import time
import random

left_player_name = input("Enter name for the left player: ")  # ZS: Using this input function at the start of the code, before the game starts, the left player is prompted to input a name
right_player_name = input("Enter name for the right player: ")  # ZS: Before the game starts, the right player is prompted to input a name

# Create screen
sc = turtle.Screen()  # This just creates a graphical screen, where our game will be.
sc.title("Pong game")  # Title name
sc.bgcolor("green")  # Background color
sc.setup(width=1000, height=600)  # Dimensions of screen: (-500-500, and -300 to 300)

# Draw borders manually - Joaquin
border = turtle.Turtle()
border.speed(0)
border.color("white")
border.penup()

# Start at the top-left corner of the border - Joaquin
border.goto(-500, 300)
border.pendown()
border.pensize(40)

# Draw the border rectangle - Joaquin
border.goto(500, 300)
border.goto(500, -300)
border.goto(-500, -300)
border.goto(-500, 300)
border.hideturtle()

# Draw the center circle - Joaquin
circle = turtle.Turtle()
circle.speed(0)
circle.color("white")
circle.penup()
circle.goto(0, 0)
circle.shape("circle")
circle.shapesize(7, 7)

# Draw the green center circle part - Joaquin
circle = turtle.Turtle()
circle.speed(0)
circle.color("green")
circle.penup()
circle.goto(0, 0)
circle.shape("circle")
circle.shapesize(5, 5)

# Draw the center line to split the halves - Joaquin
middle = turtle.Turtle()
middle.speed(0)
middle.color("white")
middle.penup()
middle.goto(0, 0)  # Center of the grid
middle.shape("square")
middle.shapesize(stretch_wid=1000, stretch_len=1)  # Length and width of the rectangle

# Left paddle
left_pad = turtle.Turtle()  # On turtle, this creates an object
left_pad.speed(0)  # Initial speed of the paddle
left_pad.shape("square")  # Shape of paddle we want
left_pad.color("black")  # Color of the paddle
left_pad.shapesize(stretch_wid=6, stretch_len=2)  # Dimensions of paddle
left_pad.penup()  # Gets rid of the object as its moving, aka updating screen and gets rid of past paddles.
left_pad.goto(-400, 0)  # The location of the paddle, is at end of left.

# Right paddle
right_pad = turtle.Turtle()  # Basically Same as Left paddle
right_pad.speed(0)
right_pad.shape("square")
right_pad.color("black")
right_pad.shapesize(stretch_wid=6, stretch_len=2)
right_pad.penup()
right_pad.goto(400, 0)  # The location of the paddle is near right end

# Ball of circle shape
hit_ball = turtle.Turtle()
hit_ball.speed(0)  # Initial speed of ball
hit_ball.shape("circle")  # Shape of ball
hit_ball.color("black")  # Color of ball
hit_ball.penup()  # Gets rid of the object as its moving, aka updating screen and gets rid of past paddles.
hit_ball.goto(0, 0)  # Start very middle

# Original speed values (Will use for ball)
original_dx = 5  # X-movement
original_dy = -5  # Y-movement

# Set ball speed to original values
hit_ball.dx = original_dx  # Setting X-movement to the ball
hit_ball.dy = original_dy  # Setting Y-movement to the ball

# Initialize the score
left_player = 0
right_player = 0

fire_emoji = "ðŸ”¥"   # ZS: Defined a fire emoji to display when a player is one point away from winning

# Displays the score at the top
sketch = turtle.Turtle()
sketch.speed(0)
sketch.color("blue")
sketch.penup()
sketch.hideturtle()
sketch.goto(0, 230)  # Score is at the top
sketch.write(f"{left_player_name} : 0    {right_player_name} : 0",  # ZS: Using an f-string to embed the variable names onto the score board so that the player names are used, rather than left player and right player
             align="center", font=("Courier", 24, "normal"))  # Basics of putting score on top of screen

# Functions to move paddles
def paddleaup():
    y = left_pad.ycor()
    if y < 250:  # Limit paddle movement to top
        y += 20
        left_pad.sety(y)

def paddleadown():
    y = left_pad.ycor()
    if y > -240:  # Limit paddle movement
        y -= 20
        left_pad.sety(y)

def paddlebup():
    y = right_pad.ycor()
    if y < 250:  # Limit paddle movement to top
        y += 20
        right_pad.sety(y)

def paddlebdown():
    y = right_pad.ycor()
    if y > -240:  # Limit paddle movement
        y -= 20
        right_pad.sety(y)

# Keyboard bindings
sc.listen()
sc.onkeypress(paddleaup, "w")  # Changed to 'w'
sc.onkeypress(paddleadown, "s")  # Changed to 's'
sc.onkeypress(paddlebup, "Up")
sc.onkeypress(paddlebdown, "Down")

def RandomColourChanger():  # Joaquin - made a function to return a random colour choice from the list. This choice will
                            # then be used when there is a ball collision
    ball_colours = ["brown", "yellow", "black", "orange", "blue", "gray", "white", "red"]
    A = random.choice(ball_colours)
    return A

def reset_game():  # HK: Function to reset the game
    global left_player, right_player, hit_ball, game_over

    # HK: Reset ball position and speed
    hit_ball.goto(0, 0)
    hit_ball.dx = original_dx  
    hit_ball.dy = original_dy  

    # HK: Reset paddles to the middle
    left_pad.goto(-400, 0)  
    right_pad.goto(400, 0)  

    # Reset scores
    left_player = 0  
    right_player = 0  
    sketch.clear()  # HK: Clear the previous score from the screen

    # Write the updated score to the top of the screen
    sketch.goto(0, 230)
    sketch.write(f"{left_player_name} : {left_player}    {right_player_name} : {right_player}", # ZS: Using an f-string to continue displaying the variable names next to the updated score 
                 align="center", font=("Courier", 24, "normal"))

    game_over = False

# Main game loop
game_over = False
sc.onkeypress(reset_game, "r")  # HK: Allow the user to press 'r' to reset the game during gameplay

while True:
    sc.update()
    time.sleep(0.01)

    if game_over:
        continue

    hit_ball.setx(hit_ball.xcor() + hit_ball.dx)
    hit_ball.sety(hit_ball.ycor() + hit_ball.dy)

    # Checking borders
    if hit_ball.ycor() > 280:
        hit_ball.sety(280)
        hit_ball.dy *= -1
        hit_ball.color(RandomColourChanger())

    if hit_ball.ycor() < -280:
        hit_ball.sety(-280)
        hit_ball.dy *= -1
        hit_ball.color(RandomColourChanger())

    # Scoring logic
    if hit_ball.xcor() > 500:
        hit_ball.goto(0, 0)
        hit_ball.dy *= -1
        left_player += 1

        # Update score
        left_display_name = f"{left_player_name} {fire_emoji}" if left_player == 4 else left_player_name # ZS: First, using an f'string containing the variable player name and variable fire emoji. Second, using an if statement to check if the left (right) player's score is 4 (one point from winning). If so, a fire emoji will display beside the player's name
        right_display_name = f"{right_player_name} {fire_emoji}" if right_player == 4 else right_player_name # ZS
        sketch.clear()
        sketch.write(f"{left_display_name} : {left_player}    {right_display_name} : {right_player}", # ZS
                     align="center", font=("Courier", 24, "normal"))
        if left_player >= 5:
            sketch.clear()
            sketch.goto(0, 0)
            sketch.write(f"{left_player_name} wins! Press 'r' to restart.", # ZS: Using an f-string to show that the left player won, displaying the variable name
                         align="center", font=("Courier", 24, "normal"))
            game_over = True

    if hit_ball.xcor() < -500:
        hit_ball.goto(0, 0)
        hit_ball.dy *= -1
        right_player += 1

        # Update score
        left_display_name = f"{left_player_name} {fire_emoji}" if left_player == 4 else left_player_name # ZS
        right_display_name = f"{right_player_name} {fire_emoji}" if right_player == 4 else right_player_name # ZS
        sketch.clear()
        sketch.write(f"{left_display_name} : {left_player}    {right_display_name} : {right_player}", # ZS
                     align="center", font=("Courier", 24, "normal"))
        if right_player >= 5:
            sketch.clear()
            sketch.goto(0, 0)
            sketch.write(f"{right_player_name} wins! Press 'r' to restart.", # ZS: Using an f-string to show that the right player won, displaying the variable name
                         align="center", font=("Courier", 24, "normal"))
            game_over = True

    # Paddle ball collision logic remains unchanged
    if (hit_ball.xcor() > 360 and hit_ball.xcor() < 370) and \
            (hit_ball.ycor() < right_pad.ycor() + 50 and hit_ball.ycor() > right_pad.ycor() - 50):
        hit_ball.setx(360)
        hit_ball.dx *= -1.05
        hit_ball.dy *= 1.05
        hit_ball.color(RandomColourChanger())

    if (hit_ball.xcor() < -360 and hit_ball.xcor() > -370) and \
            (hit_ball.ycor() < left_pad.ycor() + 50 and hit_ball.ycor() > left_pad.ycor() - 50):
        hit_ball.setx(-360)
        hit_ball.dx *= -1.05
        hit_ball.dy *= 1.05
        hit_ball.color(RandomColourChanger())
