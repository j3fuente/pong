#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Nov 29 08:33:08 2024

@author: hadikalach-chemeng
"""

import turtle
import time
import random

# Create screen
sc = turtle.Screen()  # This just creates a graphical screen, where our game will be.
sc.title("Pong game")  # Title name
sc.bgcolor("green")  # Background color
sc.setup(width=1000, height=600)  # Dimensions of screen: (-500-500, and -300 to 300)
sc.tracer(0)

# Draw borders manually - Joaquin
border = turtle.Turtle()
border.speed(0)
border.color("white")
border.penup()

# Start at the top-left corner of the border - Joaquin
border.goto(-500, 300) 
border.pendown()
border.pensize(40)

# Draw the border rectangle - Joaquin
border.goto(500, 300) 
border.goto(500, -300)  
border.goto(-500, -300)  
border.goto(-500, 300)  
border.hideturtle() 


#draw the center circle - Joaquin
circle = turtle.Turtle()
circle.speed(0)
circle.color("white")
circle.penup()
circle.goto(0,0)
circle.shape("circle")
circle.shapesize(7,7)

#draw the green center circle part - Joaquin
circle = turtle.Turtle()
circle.speed(0)
circle.color("green")
circle.penup()
circle.goto(0,0)
circle.shape("circle")
circle.shapesize(5,5)

#draw the center line to split the halves - Joaquin
middle = turtle.Turtle()
middle.speed(0)
middle.color("white")
middle.penup()
middle.goto(0,0) #center of the grid
middle.shape("square")
middle.shapesize(stretch_wid = 1000, stretch_len=1) #length and width of the rectangle 

# draw box for red player - PS
redbox = turtle.Turtle()
redbox.speed(0)
redbox.color("red")
redbox.penup()

redbox.goto(-475, 120) 
redbox.pendown()
redbox.pensize(10)

redbox.goto(-475, 120) 
redbox.goto(-360, 120)  
redbox.goto(-360, -120)  
redbox.goto(-475, -120)  
redbox.hideturtle() 

# draw box for blue player - PS
bluebox = turtle.Turtle()
bluebox.speed(0)
bluebox.color("blue")
bluebox.penup()

bluebox.goto(475, 120) 
bluebox.pendown()
bluebox.pensize(10)

bluebox.goto(475, 120) 
bluebox.goto(360, 120)  
bluebox.goto(360, -120)  
bluebox.goto(475, -120)  
bluebox.hideturtle() 


# Left paddle
left_pad = turtle.Turtle()  # On turtle, this creates an object
left_pad.speed(0)  # Initial speed of the paddle
left_pad.shape("square")  # Shape of paddle we want
left_pad.color("Red")  # PS: CHanged color to Red
left_pad.shapesize(stretch_wid=6, stretch_len=2)  # Dimensions of paddle
left_pad.penup()  # Gets rid of the object as its moving, aka updating screen and gets rid of past paddles.
left_pad.goto(-400, 0)  # The location of the paddle, is at end of left.

# Right paddle
right_pad = turtle.Turtle()  # Basically Same as Left paddle
right_pad.speed(0)
right_pad.shape("square")
right_pad.color("Blue") # PS: Changed color to Blue
right_pad.shapesize(stretch_wid=6, stretch_len=2)
right_pad.penup()
right_pad.goto(400, 0)  # The location of the paddle is near right end

# Ball of circle shape
hit_ball = turtle.Turtle()
hit_ball.speed(0)  # Initial speed of ball
hit_ball.shape("circle")  # Shape of ball 
hit_ball.color("black")  # Color of ball
hit_ball.penup()  # Gets rid of the object as its moving, aka updating screen and gets rid of past paddles.
hit_ball.goto(0, 0)  # Start very middle

# Original speed values(Will use for ball)
original_dx = 3  # X-movement
original_dy = -3  # Y-movement

# Set ball speed to original values
hit_ball.dx = original_dx  # Setting X-movement to the ball
hit_ball.dy = original_dy  # Setting Y-movement to the ball

# Initialize the score
left_player = 0
right_player = 0

# Displays the score at the top
sketch = turtle.Turtle()
sketch.speed(0)
sketch.color("Black") #PS: CHanged from Blue to Black
sketch.penup()
sketch.hideturtle()
sketch.goto(0, 230)  # Score is at the top
sketch.write("Left_player : 0    Right_player: 0",
             align="center", font=("Courier", 24, "normal"))  # Basics of putting score on top of screen


# created border for scoreboard - PS
# created border for scoreboard - PS
scoreboard = turtle.Turtle()
scoreboard.speed(0)
scoreboard.color("blue")
scoreboard.penup()

scoreboard.goto(-380, 230) 
scoreboard.pendown()
scoreboard.pensize(5)

scoreboard.goto(380, 230) 
scoreboard.goto(380, 268)  
scoreboard.goto(-380, 268)  
scoreboard.goto(-380, 230)  
scoreboard.hideturtle() 

# Functions to move paddles
def paddleaup():
    y = left_pad.ycor()
    if y < 250:  # Limit paddle movement to top
        y += 20
        left_pad.sety(y)

def paddleadown():
    y = left_pad.ycor()
    if y > -240:  # Limit paddle movement
        y -= 20
        left_pad.sety(y)

def paddlebup():
    y = right_pad.ycor()
    if y < 250:  # Limit paddle movement to top
        y += 20
        right_pad.sety(y)

def paddlebdown():
    y = right_pad.ycor()
    if y > -240:  # Limit paddle movement
        y -= 20
        right_pad.sety(y)

# Keyboard bindings
sc.listen()
sc.onkeypress(paddleaup, "w")  # Changed to 'w'
sc.onkeypress(paddleadown, "s")  # Changed to 's'
sc.onkeypress(paddlebup, "Up")
sc.onkeypress(paddlebdown, "Down")

def RandomColourChanger(): #Joaquin - made a function to return a random colour choice from the list. This choice will
                            # then be used when there is a ball collision
    ball_colours = ["brown","yellow","black","orange","blue","gray","white","red"]
    A = random.choice(ball_colours)
    return A

def reset_game():  # HK: Function to reset the game
    global left_player, right_player, hit_ball, game_over  # HK: Bringing variables outside the function into this function, learned from tkinter experience :)

    # HK: Reset ball position and speed
    hit_ball.goto(0, 0)
    hit_ball.dx = original_dx  
    hit_ball.dy = original_dy  

    # HK: Reset paddles to the middle
    left_pad.goto(-400, 0)  
    right_pad.goto(400, 0)  

    # Reset scores, but keeping it where it was originally (TOP)
    left_player = 0  
    right_player = 0  
    sketch.clear()  # HK: Clear the previous score from the screen

    # HK: Write the updated score to the top of the screen, EXACT SAME AS HOW CODE WAS GIVEN
    sketch.goto(0, 230)  # Score is at the top
    sketch.write("Left_player : {}    Right_player: {}".format(left_player, right_player), align="center", font=("Courier", 24, "normal"))

    game_over = False  # HK: Set the game over to False to allow the game to continue

# Main game loop
game_over = False  # HK: Initially, game_over is set to False to allow the game to start

game_on = True
# HK: Add key listener for resetting the game before the game is over
sc.onkeypress(reset_game, "r")  # HK: Allow the user to press 'r' to reset the game during gameplay

while game_on:  # HK: Main loop for the game to keep running
    sc.update()  # HK: Update the screen to reflect the changes made in each iteration
    time.sleep(0.01)  # HK: Add a small delay to make the game run at a reasonable speed and feel smooth

    if game_over == True:  # HK: If the game is over, stop executing the rest of the loop
        continue  # HK: Skip the rest of the loop and do nothing if the game is over

    hit_ball.setx(hit_ball.xcor() + hit_ball.dx)  # HK: Move the ball horizontally based on its dx value
    hit_ball.sety(hit_ball.ycor() + hit_ball.dy)  # HK: Move the ball vertically based on its dy value

    # Checking borders
    if hit_ball.ycor() > 280:  # HK: If the ball touches the top border of the screen
        hit_ball.sety(280)  # HK: Place the ball at the top border
        hit_ball.dy *= -1  # HK: Reverse the ball's vertical direction
        #Joaquin - changes the colour on a hit of a paddle or wall
        hit_ball.color(RandomColourChanger()) 

    if hit_ball.ycor() < -280:  # HK: If the ball touches the bottom border of the screen
        hit_ball.sety(-280)  # HK: Place the ball at the bottom border
        hit_ball.dy *= -1  # HK: Reverse the ball's vertical direction
        #Joaquin - changes the colour on a hit of a paddle or wall
        hit_ball.color(RandomColourChanger()) 

    # Scoring logic
    
# Scoring logic
    if hit_ball.xcor() > 500:  # If the ball crosses the right border
        hit_ball.goto(0, 0)  # Reset the ball to the center
        hit_ball.dy *= -1  # Reverse the ball's vertical direction
        left_player += 1  # Increment the left player's score
        sketch.clear()  # Clear the old score from the screen
        sketch.goto(0, 230)  # Score is at the top
        sketch.write("Left_player : {}    Right_player: {}".format(left_player, right_player), align="center", font=("Courier", 24, "normal"))
        hit_ball.dx = original_dx 
        hit_ball.dy = original_dy 
    
    # Check if left player wins
    if left_player >= 5:  
        sketch.clear()  
        sketch.goto(0, 240) 
        sketch.write("Left player wins!        Press 'r' to restart.",  # Display a win message
                     align="center", font=("Courier", 24, "normal"))
        game_over = True  # Set the game over flag

# Check for right player win condition
    if hit_ball.xcor() < -500:  # If the ball crosses the left border
        hit_ball.goto(0, 0)  # Reset the ball to the center
        hit_ball.dy *= -1  # Reverse the ball's vertical direction
        right_player += 1  # Increment the right player's score
        sketch.clear()  # Clear the old score from the screen
        sketch.goto(0, 230)  # Score is at the top
        sketch.write("Left_player : {}    Right_player: {}".format(left_player, right_player), align="center", font=("Courier", 24, "normal"))
        hit_ball.dx = -original_dx  
        hit_ball.dy = original_dy  

    # Check if right player wins
    if right_player >= 5:  
        sketch.clear()  
        sketch.goto(0, 240) 
        sketch.write("Right player wins!        Press 'r' to restart.",  # Display a win message
                     align="center", font=("Courier", 24, "normal"))
        game_over = True  # Set the game over flag

    if hit_ball.xcor() > 500: 
        hit_ball.goto(0, 0)  # HK: Reset the ball to the center
        hit_ball.dy *= -1  # HK: Reverse the ball's vertical direction
        left_player += 1  # HK: Increment the left player's score
        sketch.clear()  # HK: Clear the old score from the screen
        # HK: Update and display the new score
        sketch.goto(0, 230)  # Score is at the top
        sketch.write("Left_player : {}    Right_player: {}".format(left_player, right_player), align="center", font=("Courier", 24, "normal"))
        hit_ball.dx = original_dx 
        hit_ball.dy = original_dy 
        
        if left_player >= 5:  
            sketch.clear()  
            sketch.goto(0, 230) 
            sketch.write("Left player wins!     Press 'r' to restart.",  # HK: Display a win message
                         align="center", font=("Courier", 24, "normal"))
            
        if right_player >=5:
            sketch.clear()  
            sketch.goto(0, 230) 
            sketch.write("Right player wins!     Press 'r' to restart.",  # HK: Display a win message
                         align="center", font=("Courier", 24, "normal"))
            
            game_over = True  

    if hit_ball.xcor() < -500:  
        hit_ball.goto(0, 0)  
        hit_ball.dy *= -1  
        right_player += 1  
        sketch.clear()  
      
        sketch.goto(0, 230)  
        sketch.write("Left_player : {}    Right_player: {}".format(left_player, right_player), align="center", font=("Courier", 24, "normal"))
        hit_ball.dx = original_dx  
        hit_ball.dy = original_dy  
    if (hit_ball.xcor() > 360 and hit_ball.xcor() < 370) and (hit_ball.ycor() < right_pad.ycor() + 50 and hit_ball.ycor() > right_pad.ycor() - 50):
        hit_ball.setx(360)  
        hit_ball.dx *= -1.05  
        hit_ball.dy *= 1.05  
        #Joaquin - changes the colour on a hit
        hit_ball.color(RandomColourChanger()) 

    if (hit_ball.xcor() < -360 and hit_ball.xcor() > -370) and (hit_ball.ycor() < left_pad.ycor() + 50 and hit_ball.ycor() > left_pad.ycor() - 50):
        hit_ball.setx(-360)  
        hit_ball.dx *= -1.05  
        hit_ball.dy *= 1.05  
        #Joaquin - changes the colour on a hit
        hit_ball.color(RandomColourChanger()) 
