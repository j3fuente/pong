#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Nov 25 18:09:44 2024

@author: hadikalach-chemeng
"""

import turtle
import time
import math

# Create screen
sc = turtle.Screen()  # This creates a graphical screen where our game will run.
sc.title("Pong game")  # Title name
sc.bgcolor("white")  # Background color
sc.setup(width=1000, height=600)  # Dimensions of screen (-500 to 500, and -300 to 300)

# Left paddle
left_pad = turtle.Turtle()  # Creates an object for the left paddle
left_pad.speed(0)  # Initial speed of the paddle
left_pad.shape("square")  # Shape of the paddle
left_pad.color("black")  # Color of the paddle
left_pad.shapesize(stretch_wid=6, stretch_len=2)  # Paddle dimensions
left_pad.penup()  # Prevents drawing of lines while moving
left_pad.goto(-400, 0)  # Position of the left paddle at the far left of the screen

# Right paddle
right_pad = turtle.Turtle()  # Creates an object for the right paddle
right_pad.speed(0)  # Initial speed of the paddle
right_pad.shape("square")  # Shape of the paddle
right_pad.color("black")  # Color of the paddle
right_pad.shapesize(stretch_wid=6, stretch_len=2)  # Paddle dimensions
right_pad.penup()  # Prevents drawing of lines while moving
right_pad.goto(400, 0)  # Position of the right paddle at the far right of the screen

# Ball of circle shape
hit_ball = turtle.Turtle()  # Creates an object for the ball
hit_ball.speed(0)  # Initial speed of the ball
hit_ball.shape("circle")  # Shape of the ball
hit_ball.color("black")  # Color of the ball
hit_ball.penup()  # Prevents drawing of lines while moving
hit_ball.goto(0, 0)  # Position of the ball in the center

# Original speed values for the ball (movement)
original_dx = 3  # X-direction movement speed
original_dy = -3  # Y-direction movement speed

# Set ball speed to original values
hit_ball.dx = original_dx  # Setting X-movement of the ball
hit_ball.dy = original_dy  # Setting Y-movement of the ball

# Initialize scores for both players
left_player = 0
right_player = 0

# Display score at the top of the screen
sketch = turtle.Turtle()
sketch.speed(0)
sketch.color("blue")
sketch.penup()
sketch.hideturtle()
sketch.goto(0, 260)  # Score is displayed at the top of the screen
sketch.write("Left_player : 0    Right_player: 0",
             align="center", font=("Courier", 24, "normal"))

# Functions to move paddles
def paddleaup():
    y = left_pad.ycor()
    if y < 250:  # Limit paddle movement to top
        y += 20
        left_pad.sety(y)

def paddleadown():
    y = left_pad.ycor()
    if y > -240:  # Limit paddle movement to bottom
        y -= 20
        left_pad.sety(y)

def paddlebup():
    y = right_pad.ycor()
    if y < 250:  # Limit paddle movement to top
        y += 20
        right_pad.sety(y)

def paddlebdown():
    y = right_pad.ycor()
    if y > -240:  # Limit paddle movement to bottom
        y -= 20
        right_pad.sety(y)

# Keyboard bindings
sc.listen()
sc.onkeypress(paddleaup, "w")  # Left paddle moves up with 'w'
sc.onkeypress(paddleadown, "s")  # Left paddle moves down with 's'
sc.onkeypress(paddlebup, "Up")  # Right paddle moves up with 'Up Arrow'
sc.onkeypress(paddlebdown, "Down")  # Right paddle moves down with 'Down Arrow'

# Reset the game when 'r' is pressed
def reset_game():  # HK: Function to reset the game
    global left_player, right_player, hit_ball, game_over  # HK: Bringing global variables into the function
    
    # HK: Reset ball position and speed
    hit_ball.goto(0, 0)  # Reset ball to the center
    hit_ball.dx = original_dx  # Reset ball's X-movement
    hit_ball.dy = original_dy  # Reset ball's Y-movement

    # HK: Reset paddles to the middle of the screen
    left_pad.goto(-400, 0)
    right_pad.goto(400, 0)

    # HK: Reset scores to 0
    left_player = 0
    right_player = 0
    sketch.clear()  # HK: Clear the previous score from the screen
    
    # HK: Write the updated score to the top of the screen
    sketch.write("Left_player : {}    Right_player: {}".format(
        left_player, right_player), align="center", font=("Courier", 24, "normal"))

    # HK: Set the game over flag to False to allow the game to continue
    game_over = False

# Main game loop
game_over = False  # HK: Initially, the game is not over
# HK: Add key listener for resetting the game before the game is over
sc.onkeypress(reset_game, "r")  # HK: Allow the user to press 'r' to reset the game during gameplay

while True:  # HK: Main loop for the game to keep running
    sc.update()  # HK: Update the screen to reflect changes (like paddle or ball movement)
    time.sleep(0.01)  # HK: Pause to make the game run at a consistent speed

    if game_over:  # If the game is over, skip the rest of the loop
        continue  

    # HK: Move the ball based on its speed in both directions
    hit_ball.setx(hit_ball.xcor() + hit_ball.dx)  # Move the ball horizontally
    hit_ball.sety(hit_ball.ycor() + hit_ball.dy)  # Move the ball vertically

    # HK: Check if the ball hits the top or bottom of the screen
    if hit_ball.ycor() > 280:  # Ball hits the top
        hit_ball.sety(280)  # Prevent ball from going out of bounds
        hit_ball.dy *= -1  # Reverse Y-direction

    if hit_ball.ycor() < -280:  # Ball hits the bottom
        hit_ball.sety(-280)  # Prevent ball from going out of bounds
        hit_ball.dy *= -1  # Reverse Y-direction

    # Scoring logic for when the ball passes a paddle
    if hit_ball.xcor() > 500:  # Right side of the screen
        hit_ball.goto(0, 0)  # Reset ball to center
        hit_ball.dy *= -1  # Reverse Y-direction
        left_player += 1  # Left player scores a point
        sketch.clear()  # Clear previous score
        sketch.write("Left_player : {}    Right_player: {}".format(
            left_player, right_player), align="center", font=("Courier", 24, "normal"))
        hit_ball.dx = original_dx  # Reset ball's X-speed
        hit_ball.dy = original_dy  # Reset ball's Y-speed
        if left_player >= 5:  # HK: Check if left player wins
            sketch.clear()
            sketch.goto(0, 0)
            sketch.write("Left player wins! Press 'r' to restart.",  # Display win message
                         align="center", font=("Courier", 24, "normal"))
            game_over = True  # End the game

    if hit_ball.xcor() < -500:  # Left side of the screen
        hit_ball.goto(0, 0)  # Reset ball to center
        hit_ball.dy *= -1  # Reverse Y-direction
        right_player += 1  # Right player scores a point
        sketch.clear()  # Clear previous score
        sketch.write("Left_player : {}    Right_player: {}".format(
            left_player, right_player), align="center", font=("Courier", 24, "normal"))
        hit_ball.dx = original_dx  # Reset ball's X-speed
        hit_ball.dy = original_dy  # Reset ball's Y-speed
        if right_player >= 5:  # HK: Check if right player wins
            sketch.clear()
            sketch.goto(0, 0)
            sketch.write("Right player wins! Press 'r' to restart.",  # Display win message
                         align="center", font=("Courier", 24, "normal"))
            game_over = True  # End the game

    # Paddle ball collision detection
    if (hit_ball.xcor() > 360 and hit_ball.xcor() < 370) and \
            (hit_ball.ycor() < right_pad.ycor() + 50 and hit_ball.ycor() > right_pad.ycor() - 50):
        hit_ball.setx(360)  # Position ball at edge of the paddle
